@page "/basicdemos"
@using ArchitectNow.SemanticKernelDemo.Services
@using Microsoft.SemanticKernel
@using Microsoft.SemanticKernel.ChatCompletion
@rendermode InteractiveServer
@inject ISemanticKernelService SemanticKernelService
@inject IUserRepository UserRepository

<MudDialogProvider/>
<MudSnackbarProvider/>
<MudPopoverProvider/>

<PageTitle>ArchitectNow Semantic Kernel Demo</PageTitle>
<MudContainer MaxWidth="MaxWidth.ExtraExtraLarge">
    <MudGrid>
        <MudItem xs="12">
            
            <MudButton Variant="Variant.Text" Color="Color.Success" OnClick="BasicChatExecution">Basic Chat Execution</MudButton>
        </MudItem>
        <MudItem xs="12">
            <MudStack Direction="LayoutDirection.Vertical">
                @foreach (var msg in chatHistory)
                {
                    if (msg.Role == AuthorRole.System)
                    {
                        <MudText Color="Color.Info">System: @msg.Content</MudText>
                    }
                    else if (msg.Role == AuthorRole.Assistant && !string.IsNullOrEmpty(msg.Content))
                    {
                        <MudText Color="Color.Secondary">OpenAI Response: @msg.Content</MudText>
                    }
                    else if (msg.Role == AuthorRole.User)
                    {
                        <MudText Color="Color.Primary">User: @msg.Content</MudText>
                    }
                    else if (msg.Role == AuthorRole.Tool)
                    {
                        foreach (var contentItem in msg.Items)
                        {
                            if (contentItem is FunctionResultContent)
                            {
                               var functionResult = (FunctionResultContent)contentItem;
                                <MudText Color="Color.Tertiary"> Tool Executed: @functionResult.PluginName @functionResult.FunctionName</MudText>
                            } else if (contentItem is TextContent)
                            {
                                var textResult = (TextContent)contentItem;
                                if (!string.IsNullOrEmpty(textResult.Text))
                                {
                                    <MudText Color="Color.Tertiary"> Tool text result: @textResult.Text</MudText>
                                }
                            }
                        }
                    }
                }
                <MudText>Input Message:</MudText>
                <MudInput T="string" @bind-Value="userMessage"></MudInput>
                <MudButton Variant="Variant.Text" Color="Color.Success" OnClick="SendMessage">Send</MudButton>
            </MudStack>
        </MudItem>
    </MudGrid>
</MudContainer>

<style>
    .blue-link {
        color: #007BFF;
    }

    .large-banner {
        display: block;
        width: 100%;
        height: auto;
    }

    .small-banner {
        display: none;
        width: 100%;
        height: auto;
    }

    @@media (max-width: 600px) {
        .large-banner {
            display: none;
        }

        .small-banner {
            display: block;
        }
    }

</style>

@code {
    
    private ChatHistory chatHistory = new ChatHistory("You are a helpful assistant in an AI demo showcasing the .NET semantic kernel");
    private string userMessage;

    protected override async Task OnInitializedAsync()
    {

    }

    private async Task BasicChatExecution()
    {
        var catResponse = await SemanticKernelService.GenerateCompletionAsync("You are a helpful assistant.", "What is the capital of France?");
    }
    
    private async Task SendMessage()
    {
        chatHistory = await SemanticKernelService.GenerateCompletionAsync(chatHistory, userMessage);
        userMessage = "";
    }

}